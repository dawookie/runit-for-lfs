#!/bin/sh

# Linux From Scratch Runit Stage 1 Bootscript.
# Copyright 2014 James Powell, Keith Hedger, and Stoat of LinuxQuestions.
# Work derived from VoidLinux and ArchIgnite and adapted for LFS.

PATH=/bin:/sbin:/usr/bin:/usr/sbin

# This will setup a sulogin shell just in case any part of the boot process suddenly stops
# for whatever reason.
emergency_shell() {
    echo "Cannot continue due to errors above, starting emergency shell."
    echo "When ready type exit to continue booting."
    /bin/sh -l
}

msg() {
    # bold
    printf "\033[1m=> $@\033[m"
}

msg_ok() {
    # bold/green
    printf "\033[1m\033[32m OK\033[m\n"
}

msg_fail() {
    # bold/red
    printf "\033[1m\033[31m FAIL\033[m\n"
}

msg_warn() {
    # bold/yellow
    printf "\033[1m\033[33mWARNING: $@\033[m"
}

msg "Welcome to Linux From Scratch! \n"

# By default Stage 1 should already come with the system defaults and recommended setups.
# If you need to load anything optional, you may use the /etc/runit.conf file as a method
# to load optional system preferences.
. /etc/runit.conf

# Let's mount the kernel virtual file systems here. In the past mountvirtfs was used to do this.
# This section reduplicates this functionality and simplifies the process. This will read fstab
# properly and mount according to the triggers specificed.
msg "Mounting pseudo-filesystems...\n"
mountpoint -q /run || mount /run
mkdir -p -m0755 /run/{lvm,user,var,lock,shm}
chmod 1777 /run/shm
mountpoint -q /proc || mount /proc
mountpoint -q /sys || mount /sys
mountpoint -q /dev || mount /dev
ln -sfn /run/shm /dev/shm
mkdir -p -m0755 /dev/pts
mountpoint -q /dev/pts || mount /dev/pts

# Let's get root mounted at least in read-only for now.
msg "Remounting rootfs read-only...\n"
mount -o remount,ro /

# Let's setup the Console modes to display unicode style fonts and graphics.
msg "Setting up ttys to unicode mode...\n"
for i in /dev/tty[0-6]; do
    unicode_start < $i
done
if [ -n "$FONT" ]; then
    msg "Setting up ttys font to '${FONT}'...\n"
    for i in /dev/tty[0-6]; do
        setfont ${FONT_MAP:+-m $FONT_MAP} ${FONT_UNIMAP:+-u $FONT_UNIMAP} $FONT -C $i
    done
fi

# We'll load a keymap from here as a default.
msg "Setting up keymap to '${KEYMAP:-us}'...\n"
loadkeys -q -u ${KEYMAP:-us}

# This will load the systems internal Real-Time Clock to set up the internal clocks first.
if [ -n "$HARDWARECLOCK" ]; then
    msg "Setting up RTC to '${HARDWARECLOCK}'...\n"
    TZ=$TIMEZONE hwclock --systz \
        ${HARDWARECLOCK:+--$(echo $HARDWARECLOCK |tr A-Z a-z) --noadjfile}
fi

# Let's get udev started. This is the first pass for udev, so it should trigger any and all
# devices during this stage, if it doesn't the second pass will pick up anything else not
# properly loaded.
if [ -x /usr/sbin/udevd ]; then
    _udevd=/usr/sbin/udevd
else
    msg_warn "cannot find udevd!\n"
fi

# Anything not loaded by udev during the first pass, will now get loaded. This is helpful if
# kernel modules have dependencies that require a loading prior to them, or just oddball
# hardware that fails to load properly.
if [ -n "${_udevd}" ]; then
    msg "Starting udev and waiting for devices to settle...\n"
    { ${_udevd} --daemon;
        udevadm trigger --action=add --type=subsystems;
        udevadm trigger --action=add --type=devices;
        udevadm settle; } || emergency_shell
fi

# Now we'll get the loopback device started.
msg "Setting up loopback interface...\n"
ip link set up dev lo

# We'll load the system hostname, if it exists.
[ -r /etc/sysconfig/network ] && . /etc/sysconfig/network
[ -r /etc/hostname ] && HOSTNAME=$(cat /etc/hostname)
msg "Setting up hostname to '${HOSTNAME}'...\n"
hostname ${HOSTNAME} &>/dev/null

# If we have any RAID devices, we'll now load them.
if [ -x /usr/sbin/dmraid ]; then
    msg "Activating dmraid devices...\n"
    /usr/sbin/dmraid -i -ay
fi

# If we have any BtrFS partitions, we'll load them here. By default BtrFS is not utilized by
# Linux From Scratch and is considered highly unstable as a file system. This section is only
# here for compatibility reasons, and will require the btrsfs utilities packages to be installed.
if [ -x /usr/bin/btrfs ]; then
    msg "Activating btrfs devices...\n"
    btrfs device scan
fi

# Now we'll load any Logicial Volumes.
if [ -x /usr/sbin/vgchange ]; then
    msg "Activating LVM devices...\n"
    vgchange --sysinit -a y
fi

# Let's check the file systems for any errors from a previous shutdown or reboot.
msg "Checking filesystems:\n"
fsck -A -T -a -t noopts=_netdev
rval=$?
if [ $rval -gt 1 ]; then
    emergency_shell
fi

# Now we'll mount root in full read-write mode.
msg "Mounting rootfs read-write...\n"
mount -o remount,rw /

# Start the system and kernel log daemons.
. /etc/sysconfig/rc.site
parms=${SYSKLOGD_PARMS-'-m 0'}
msg "Starting system and kernel log daemons...\n"
syslogd $parms &>/dev/null
klogd &>/dev/null

# Any non-networked file systems will now be mounted.
msg "Mounting all non-network filesystems...\n"
mount -a -t "nosysfs,nonfs,nonfs4,nosmbfs,nocifs" -O no_netdev

# If we have CGroups, this will load them.
mountpoint -q /sys/fs/cgroup || mount -t tmpfs cgroup /sys/fs/cgroup -o mode=0755
awk '$4==1 { system("mountpoint -q /sys/fs/cgroup/" $1 " || mount -t cgroup -o " $1 ",x-mount.mkdir cgroup /sys/fs/cgroup/" $1) }' /proc/cgroups

# Turn on the swap partition.
msg "Initializing swap...\n"
swapon -a

# Let's set the time and update the system clock if required.
if [ -n "$TIMEZONE" ]; then
    msg "Setting up timezone to '${TIMEZONE}'...\n"
    ln -sf "/usr/share/zoneinfo/$TIMEZONE" /etc/localtime
fi

# This will create an entropy file.
msg "Initializing random seed...\n"
cp /var/lib/random-seed /dev/urandom >/dev/null 2>&1 || true
( umask 077; dd if=/dev/urandom of=/var/lib/random-seed count=1 bs=512 >/dev/null 2>&1 )

# This will remove any file-system check watermarks and other data.
install -m0664 -o root -g utmp /dev/null /run/utmp
rm -f /etc/nologin /forcefsck /forcequotacheck /fastboot

# This will load any extra kernel modules via the runit.conf file. Otherwise udev will load
# everything.
if [ -n "$MODULES" ]; then
    msg "Loading kernel modules: ${MODULES} ...\n"
    modprobe -ab ${MODULES}
fi

# Let's set the kernel runtime parameters if any exist.
if [ -f "/etc/sysctl.conf" ]; then
    msg "Setting kernel runtime parameters..."
    sysctl -q -p
fi

# Start all network interfaces up.
for file in /etc/sysconfig/ifconfig.*
  do
    interface=${file##*/ifconfig.}
      # Skip if $file is * (because nothing was found)
      if [ "${interface}" = "*" ]
        then
          continue
        fi
    /sbin/ifup ${interface}
  done

# Log the system boot.
dmesg >/var/log/dmesg.log

# Get stopit and reboot read for usage.
install -m0 /dev/null /etc/runit/reboot
install -m0 /dev/null /etc/runit/stopit

msg "Initialization complete, running stage 2... \n"